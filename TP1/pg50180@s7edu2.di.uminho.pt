
#include <stdio.h>
#include <stdlib.h>



#define N 10000000
#define K 4
#define POINTSIZE 4 // x,y,centroid,minDist
#define CENTROIDSIZE 5
#define MAXDIST 5000000



double *points;
double *centroids;
int iterations = 0;


void alloc(){

    points = (double *) malloc(POINTSIZE * N * sizeof(double));
    centroids = (double *) malloc(CENTROIDSIZE * K * sizeof(double));

}

void init(){

    

    for( int i=0 ; i<N * POINTSIZE ; i+=4 ){
        points[i] = (double) rand() / RAND_MAX;
        points[i+1] = (double) rand()/ RAND_MAX;
        points[i+2] = -1;
        points[i+3] = MAXDIST;
    }

    for(int i=0 ,j=0; i<K * CENTROIDSIZE ; i+=5 , j+=4){
        centroids[i] = points[j];
        centroids[i+1] = points[j+1];
        centroids[i+2] = 0; // numero de pontos
        centroids[i+3] = 0; // soma das coordenadas x
        centroids[i+4] = 0; // soma das coordenadas y
    }
}

double calcDist(float x1, float y1, float x2, float y2){
    double result = ((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2));

    return result;
}


void changeCentroid(int pIndex, int  cIndex, double pDist){

    int oldCentroid = (points[pIndex +2]) * CENTROIDSIZE;

    // Mudanças no ponto
    points[pIndex + 2] = cIndex;
    points[pIndex + 3] = pDist;

    // Mudanças no centroid antigo
    centroids[oldCentroid + 2]--;
    centroids[oldCentroid + 3] -= points[pIndex];
    centroids[oldCentroid + 4] -= points[pIndex+1];

    // Mudanças no centroid atual
    centroids[cIndex+2]++;
    centroids[cIndex+3] += points[pIndex];
    centroids[cIndex+4] += points[pIndex+1];

}





void kmeans(){

    int changed = 1;

    while(changed){

        double newDist;
        changed = 0;

        for(int i=0 ; i<N * POINTSIZE; i+=4){
            
            for(int j=0; j< K * CENTROIDSIZE ; j+=5 ){

                newDist = calcDist(points[i] , points[i+1],centroids[j],centroids[j+1]);

                if(points[i+2] != j ){                                                                      // diferente do centroid atual
                    
                    if(points[i+3] > newDist) {
                        changeCentroid( i , j ,newDist);
                        changed = 1;        // centroid novo mais perto
                    }            
                }
            }
        }
        iterations++;
    }   
}


void print(){

    printf("Iterations: %d\n",iterations);
    printf("N = %d, k = %d\n",N,K);
    for(int i = 0; i<K * CENTROIDSIZE;i+=5)
        printf("Center: (%f,%f) -> Size: %f\n",centroids[i],centroids[i+1],centroids[i+2]);
    
}


int main(){
    alloc();
    init();
    kmeans();
    print();
}


